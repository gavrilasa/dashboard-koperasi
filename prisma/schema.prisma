generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountStatus {
  ACTIVE
  INACTIVE
}

enum Gender {
  MALE
  FEMALE
}

enum MainAccountTransactionSource {
  MANUAL_OPERATIONAL
  FROM_CUSTOMER_DEPOSIT
  FROM_CUSTOMER_WITHDRAWAL
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  idNumber  String   @unique
  address   String
  phone     String
  gender    Gender
  birthDate DateTime

  accountNumber String        @unique
  balance       Decimal       @db.Decimal(15, 2)
  status        AccountStatus @default(ACTIVE)

  transactions  Transaction[]
  ktpAttachment Attachment?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id         String   @id @default(cuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id])

  amount      Decimal @db.Decimal(15, 2)
  type        String
  description String
  notes       String?

  createdAt DateTime @default(now())

  profitSharingEventId String?
  profitSharingEvent   ProfitSharingEvent? @relation(fields: [profitSharingEventId], references: [id])
}

model IdempotencyKey {
  id        String   @id
  createdAt DateTime @default(now())
}

model Attachment {
  id        String   @id @default(cuid())
  url       String
  mimeType  String
  size      Int
  createdAt DateTime @default(now())

  customerId String   @unique
  customer   Customer @relation(fields: [customerId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?

  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MainAccount {
  id      String  @id @default(cuid())
  name    String  @unique
  balance Decimal @db.Decimal(15, 2)

  transactions MainAccountTransaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MainAccountTransaction {
  id            String      @id @default(cuid())
  mainAccountId String
  account       MainAccount @relation(fields: [mainAccountId], references: [id])

  source                MainAccountTransactionSource @default(MANUAL_OPERATIONAL)
  customerTransactionId String?                      @unique

  amount      Decimal  @db.Decimal(15, 2)
  type        String
  description String
  notes       String?
  createdAt   DateTime @default(now())
}

model ProfitSharingEvent {
  id                   String   @id @default(cuid())
  executedAt           DateTime @default(now())
  totalAmountShared    Decimal  @db.Decimal(15, 2)
  numberOfRecipients   Int
  amountPerRecipient   Decimal  @db.Decimal(15, 2)
  remainderAmount      Decimal  @db.Decimal(15, 2)
  mainAccountDebitTxId String   @unique

  recipientTransactions Transaction[]
}

model DailyBalanceSnapshot {
  id        String   @id @default(cuid())
  date      DateTime @unique @db.Date
  balance   Decimal  @db.Decimal(15, 2)
  createdAt DateTime @default(now())
}
